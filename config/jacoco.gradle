apply plugin: 'jacoco'

jacoco {
    toolVersion = "${rootProject.ext.jacoco_version}"
    reportsDir = file("$buildDir/reports/jacoco")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
    testLogging {
        events "passed", "skipped", "failed"
    }
}

def fileGenerated = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'android/**/*.*',
        '**/*Creator*.*',
        '**/*$ViewBinder*.*',
        '**/*$InjectAdapter*.*',
        '**/*Injector*.*',
        '**/*_ViewBinding*.*',
        '**/*Companion*.*',
        '**/*_Impl*.*',
        '**/*Impl_*.*',
        '**/*_Factory*.*',
        '**/*navArgs*.*',
        '**/*Fragment*.class',
        '**/*FragmentArgs*.*',
        '**/*FragmentDirections*.*',
        '**/*_MembersInjector.class',
        '**/Dagger*Component*.class',
        '**/Dagger*Subcomponent*.class',
        '**/*Subcomponent$Builder.class',
        '**/*_*Factory.class',
        '**/*Activity*.class',
        '**/*Module*.class',
        '**/*DataSource',
        '**/*DataSource*.class',
        '**/*Repository*.class',
        '**/*Glide*.class',
        '**/*Contributor*.class',
        '**/*Binding*.class',
        '**/*BinderMapper*.class',
        '**/*androidx.databinding.**'
]

def packagesExcluded = [
        'th/co/the1/the1app/di/**',
        'th/co/the1/the1app/logging/**',
        'th/co/the1/the1app/**/secrets/**',
        'th/co/the1/the1app/ui/customviews/**',
        'com/bumptech/glide',
        'com/jd/**',
        'com.jr.lib.**'
]

def fileFilter = fileGenerated + packagesExcluded
def modular = [
        ':app-v3:testUatDebugUnitTest',
        ':the1-api-v3:testUatDebugUnitTest'
]
task jacocoTestReport(type: JacocoReport, dependsOn: modular) {
    group = "Reporting"
    description = "Generate Jacoco unit test coverage reports for Debug build"

    reports {
        xml.enabled = true
        html {
            enabled = true
            destination file("${buildDir}/reports/jacoco")
        }
    }

    def kotlinClasses = fileTree(
            dir: "$buildDir/tmp/kotlin-classes/uatDebug",
            excludes: fileFilter
    )
    final javacClasses = fileTree(
            dir: "$buildDir/intermediates/javac/uatDebug",
            excludes: fileFilter
    )

    println("buildDir : $buildDir")
    println("projectDir : ${project.projectDir}")

    classDirectories.from = files([kotlinClasses, javacClasses])
    sourceDirectories.from = files([
            "$project.projectDir/src/main/java",
            "$project.projectDir/src/main/uat/java"
    ])
    executionData.from = fileTree(
            dir: project.buildDir,
            includes: ['jacoco/testUatDebugUnitTest.exec']
    )
}
